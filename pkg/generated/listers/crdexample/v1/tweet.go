// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/tlm/crd-example/pkg/apis/crdexample/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TweetLister helps list Tweets.
type TweetLister interface {
	// List lists all Tweets in the indexer.
	List(selector labels.Selector) (ret []*v1.Tweet, err error)
	// Tweets returns an object that can list and get Tweets.
	Tweets(namespace string) TweetNamespaceLister
	TweetListerExpansion
}

// tweetLister implements the TweetLister interface.
type tweetLister struct {
	indexer cache.Indexer
}

// NewTweetLister returns a new TweetLister.
func NewTweetLister(indexer cache.Indexer) TweetLister {
	return &tweetLister{indexer: indexer}
}

// List lists all Tweets in the indexer.
func (s *tweetLister) List(selector labels.Selector) (ret []*v1.Tweet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Tweet))
	})
	return ret, err
}

// Tweets returns an object that can list and get Tweets.
func (s *tweetLister) Tweets(namespace string) TweetNamespaceLister {
	return tweetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TweetNamespaceLister helps list and get Tweets.
type TweetNamespaceLister interface {
	// List lists all Tweets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Tweet, err error)
	// Get retrieves the Tweet from the indexer for a given namespace and name.
	Get(name string) (*v1.Tweet, error)
	TweetNamespaceListerExpansion
}

// tweetNamespaceLister implements the TweetNamespaceLister
// interface.
type tweetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Tweets in the indexer for a given namespace.
func (s tweetNamespaceLister) List(selector labels.Selector) (ret []*v1.Tweet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Tweet))
	})
	return ret, err
}

// Get retrieves the Tweet from the indexer for a given namespace and name.
func (s tweetNamespaceLister) Get(name string) (*v1.Tweet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("tweet"), name)
	}
	return obj.(*v1.Tweet), nil
}
